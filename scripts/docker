#! /bin/bash
# CommCare HQ docker helper

function usage() {
    case $1 in
        test)
            echo "Run tests"
            echo ""
            echo "test [OPTIONS]"
            echo ""
            echo "All OPTIONS are passed to the selected test runner."
            echo ""
            echo "Set TEST environment variable to select a test runner:"
            echo "  TEST=python|python-sharded|javascript"
            echo ""
            echo "The default is python."
            echo ""
            ;;
        bash)
            echo "Run bash in the web container"
            echo ""
            ;;
        shell)
            echo "Run the Django shell in the web container"
            echo ""
            ;;
        services)
            echo "Manage CommCare HQ services"
            echo ""
            echo "Start services with ports mapped to the docker"
            echo "host if no other options are given."
            echo ""
            echo "All docker-compose commands are also supported. For example:"
            echo ""
            echo "$0 services ps"
            echo ""
            ;;
        teardown)
            echo "Remove all containers, images and volumes"
            echo ""
            ;;
        *)
            echo "Manage docker services for CommCare HQ"
            echo ""
            echo "$0 COMMAND [OPTIONS]"
            echo "      -h --help"
            echo "      test|services|teardown|bash|shell|help"
            echo ""
            echo "$0 help COMMAND"
            echo ""
            echo "All other commands are passed directly to docker-compose."
            echo ""
            ;;
    esac
    exit
}

XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

# export variables for compose file (they must be set or it complains)
export JS_SETUP="${JS_SETUP:-no}"
export NOSE_DIVIDED_WE_RUN="$NOSE_DIVIDED_WE_RUN"

if [ "$DOCKER_BETA" == "true" ]; then
    DOCKER_DATA_HOME=$XDG_DATA_HOME/dockerhq
elif [ `uname` == 'Linux' ]; then
    DOCKER_DATA_HOME=$XDG_DATA_HOME/dockerhq
    UDO="sudo"
else
    DOCKER_DATA_HOME=/data
fi

if [ `uname` == 'Darwin' -a "$DOCKER_BETA" != "true" ]; then
    docker-machine ssh $DOCKER_MACHINE_NAME sudo mkdir -p $DOCKER_DATA_HOME
else
    mkdir -p $DOCKER_DATA_HOME
fi

CMD=$1
shift
if [ "$CMD" == "services" ]; then
    export COMPOSE_FILE=tocker/hq-compose-services.yml
    export COMPOSE_PROJECT_NAME=hqservice
    CMD=$1
    shift
    if [ -z "$CMD" ]; then
        CMD="up -d"
    fi
    export VOLUME_PREFIX="$DOCKER_DATA_HOME/"
else
    export COMPOSE_FILE=tocker/hq-compose.yml
    export COMPOSE_PROJECT_NAME=hqtest
    export VOLUME_PREFIX="${COMPOSE_PROJECT_NAME}-"
fi

case $CMD in
    -h | --help | help | "")
        if [ "$COMPOSE_PROJECT_NAME" == "hqservice" ]; then
            usage services
        else
            usage $@
        fi
        ;;
    teardown)
        TEARDOWN=yes
        shift
        CMD="down --rmi local -v --remove-orphans"
        ;;
esac

if [ "$DOCKER_BETA" == "true" ]; then
    # Put elasticsearch data in a named data volume, automatically
    # created by docker, instead of $DOCKER_DATA_HOME/elasticsearch.
    # https://forums.docker.com/t/elasticsearch-1-7-0-fails-to-start-on-docker4mac-1-11-1-beta10/11692/3
    # The commit that introduced this can be reverted when the issue is resolved.
    export ES_DATA_VOLUME=$COMPOSE_PROJECT_NAME-elasticsearch
else
    export ES_DATA_VOLUME=${VOLUME_PREFIX}elasticsearch
fi

if [ "$CMD" == "test" ]; then
    docker-compose run -T --rm web run_tests "${TEST:-python}" "$@"
elif [ "$CMD" == "shell" ]; then
    docker-compose run --rm web ./manage.py $CMD "$@"
elif [ "$CMD" == "bash" ]; then
    docker-compose run --rm web $CMD "$@"
else
    docker-compose $CMD "$@"
    if [ "$TEARDOWN" == "yes" ]; then
        if [ "$COMPOSE_PROJECT_NAME" == "hqservice" ]; then
            echo "THIS WILL DELETE ALL SERVICE DATA"
            read -p "Delete volumes? [yN] " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Volumes not deleted."
                exit
            fi
        fi
        docker volume rm \
            ${VOLUME_PREFIX}couchdb \
            ${VOLUME_PREFIX}elasticsearch \
            ${VOLUME_PREFIX}kafka \
            ${VOLUME_PREFIX}lib \
            ${VOLUME_PREFIX}postgresql \
            ${VOLUME_PREFIX}redis \
            ${VOLUME_PREFIX}riakcs \
            ${VOLUME_PREFIX}zookeeper
    fi
fi
