***************
*** 3,11 ****
  from couchforms.models import XFormInstance
  from casexml.apps.case.models import CommCareCase
  
  from corehq.apps.cloudcare.api import ElasticCaseQuery
  from corehq.apps.api.resources.v0_2 import dict_object
- from corehq.apps.api.resources import v0_3
  from corehq.apps.api.es import XFormES, CaseES, ESQuerySet, es_search
  
  class XFormInstanceResource(v0_3.XFormInstanceResource):
--- 3,12 ----
  from couchforms.models import XFormInstance
  from casexml.apps.case.models import CommCareCase
  
+ from corehq.apps.groups.models import Group
  from corehq.apps.cloudcare.api import ElasticCaseQuery
  from corehq.apps.api.resources.v0_2 import dict_object
+ from corehq.apps.api.resources import v0_3, JsonResource
  from corehq.apps.api.es import XFormES, CaseES, ESQuerySet, es_search
  
  class XFormInstanceResource(v0_3.XFormInstanceResource):
***************
*** 103,105 ****
          return ESQuerySet(payload = ElasticCaseQuery(domain, filters).get_query(),
                            model = lambda jvalue: dict_object(CommCareCase.wrap(jvalue).get_json()),
                            es_client = CaseES(domain)) # Not that XFormES is used only as an ES client, for `run_query` against the proper index
--- 104,128 ----
          return ESQuerySet(payload = ElasticCaseQuery(domain, filters).get_query(),
                            model = lambda jvalue: dict_object(CommCareCase.wrap(jvalue).get_json()),
                            es_client = CaseES(domain)) # Not that XFormES is used only as an ES client, for `run_query` against the proper index
+ 
+ class GroupResource(JsonResource):
+     id = fields.CharField(attribute='get_id', unique=True, readonly=True)
+     domain = fields.CharField(attribute='domain')
+     name = fields.CharField(attribute='name')
+ 
+     users = fields.ListField(attribute='get_user_ids')
+     path = fields.ListField(attribute='path')
+ 
+     case_sharing = fields.BooleanField(attribute='case_sharing', default=False)
+     reporting = fields.BooleanField(default=True, attribute='reporting')
+ 
+     metadata = fields.DictField(attribute='metadata')
+ 
+     def obj_get_list(self, request, domain, **kwargs):
+         groups = Group.by_domain(domain)
+         return groups
+         
+     class Meta(v0_3.XFormInstanceResource.Meta):
+         list_allowed_methods = ['get']
+         resource_name = 'group'
+ 
