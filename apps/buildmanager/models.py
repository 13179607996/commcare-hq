from django.db import models
from django.contrib.auth.models import User
from hq.models import ExtUser
from hq.models import Domain
import os
import logging
import settings
from django.utils.translation import ugettext_lazy as _
from django.core.urlresolvers import reverse


BUILDFILES_PATH = settings.RAPIDSMS_APPS['buildmanager']['buildpath']

class Project (models.Model):
    """
    A project is a high level container for a given build project.  A project can contain
    a history of builds
    """
    domain = models.ForeignKey(Domain) 
    name = models.CharField(max_length=255)
    description = models.CharField(max_length=512, null=True, blank=True)
    
    
    def num_builds(self):
        return ProjectBuild.objects.filter(project=self).count()
    
    def __unicode__(self):
        return unicode(self.name)


BUILD_STATUS = (    
    ('build', 'Standard Build'),    
    ('alpha', 'Alpha'),
    ('beta', 'Beta'),
    ('rc', 'Release Candidate'),    
    ('release', 'Release'),   
)


class ProjectBuild(models.Model):
    '''When a jad/jar is built, it should correspond to a unique ReleasePackage
    With all corresponding meta information on release info and build information such that
    it can be traced back to a url/build info in source control.'''    
    project = models.ForeignKey(Project)
    
    #we have it as a User here because we want our build server to be able to push without knowledge of domains
    uploaded_by = models.ForeignKey(User) 
    status = models.CharField(max_length=64, choices=BUILD_STATUS, default="build")
       
    build_number = models.CharField(max_length=255)       
    revision_number = models.CharField(max_length=255, null=True, blank=True)
     
    package_created = models.DateTimeField()    
      
    jar_file = models.FilePathField(_('JAR File Location'), 
                                    match='.*\.jar$', 
                                    recursive=True,
                                    path=BUILDFILES_PATH, 
                                    max_length=255)
    
    jad_file = models.FilePathField(_('JAD File Location'), 
                                    match='.*\.jad$',
                                    recursive=True, 
                                    path=BUILDFILES_PATH, 
                                    max_length=255)
    
    description = models.CharField(max_length=512, null=True, blank=True)
    jar_download_count = models.PositiveIntegerField(default=0)
    jad_download_count = models.PositiveIntegerField(default=0)
    
    
    
    
    def save(self):
        """Override save to provide some simple enforcement of uniqueness to the build numbers
        generated by the submission of the build"""        
        if ProjectBuild.objects.filter(project=self.project).filter(build_number=self.build_number).count() > 0 and self.id == None:
                raise Exception ("Error, the build number must be unique for this project build: " + str(self.build_number) + " project: " + str(self.project.id))
        else:            
            super(ProjectBuild, self).save()
    
    def get_jar_filestream(self):
        
        try:
            fin = open(self.jar_file,'r')
            return fin
        except Exception, e:
            logging.error("Unable to open jarfile", extra={"exception": e, 
                                                           "jar_file": self.jar_file, 
                                                           "build_number": self.build_number,
                                                           "project_id": self.project.id})
    def get_jad_filestream(self):        
        try:
            fin = open(self.jad_file,'r')
            return fin
        except Exception, e:
            logging.error("Unable to open jadfile", extra={"exception": e, 
                                                           "jad_file": self.jad_file, 
                                                           "build_number": self.build_number,
                                                           "project_id": self.project.id})
    def get_jar_downloadurl(self):
        """do a reverse to get the urls for the given project/buildnumber for the direct download"""
        return reverse('get_buildfile',
                       args=(self.project.id,
                               self.build_number, 
                                os.path.basename(self.jar_file)))
        
        
    def get_jad_downloadurl(self):
        """do a reverse to get the urls for the given project/buildnumber for the direct download"""
        return reverse('get_buildfile', 
                       args=(self.project.id,
                               self.build_number, 
                                os.path.basename(self.jad_file)))
    
    def get_buildURL(self):
        """Hard coded build url for our build server"""
        return 'http://build.dimagi.com:250/viewLog.html?buildId=%s' % self.build_number
    
    def set_jadfile(self, filename, filestream):
        """Simple utility function to save the uploaded file to the right location and set the property of the model"""        
        try:
            new_file_name = self.__get_destination(filename)
            fout = open(new_file_name, 'w')
            fout.write( filestream.read() )
            fout.close()
            self.jad_file = newfilename
        except Exception, e:
            logging.error("Error, saving jadfile failed", extra={"exception":e, "jad_filename":filename})
        
        
        
    def set_jarfile(self, filename, filestream):
        """Simple utility function to save the uploaded file to the right location and set the property of the model"""
        try:
            new_file_name = self.__get_destination(filename)
            fout = open(new_file_name, 'w')
            fout.write( filestream.read() )
            fout.close()
            self.jar_file = newfilename
        except Exception, e:
            logging.error("Error, saving jarfile failed", extra={"exception":e, "jar_filename":filename})
        
    
    def __get_destination(self,filename):
        destinationpath = os.path.join(BUILDFILES_PATH,
                                           str(self.project.id),
                                           str(self.build_number))
        if not os.path.exists(destinationpath):
            os.makedirs(destinationpath)        
        return os.path.join(destinationpath, os.path.basename(str(filename)))    
